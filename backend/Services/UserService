using Dotnet_test.Domain;
using Dotnet_test.DTOs.User;
using Dotnet_test.Interfaces;
using Dotnet_test.Exceptions;
using BCrypt.Net;

namespace Dotnet_test.Services
{
    public class UserService : IUserService
    {
        private readonly IUserRepository _userRepository;

        public UserService(IUserRepository userRepository)
        {
            _userRepository = userRepository;
        }

        public async Task<IEnumerable<User>> GetAllAsync()
        {
            return await _userRepository.GetAll();
        }

        public async Task<User> GetByIdAsync(int id)
        {
            return await _userRepository.GetById(id);
        }

        public async Task<bool> DeleteUserAsync(int id)
        {
            return await _userRepository.Delete(id);
        }

        public async Task<LoginResponseDTO> LoginAsync(LoginDTO dto)
        {
            return await _userRepository.Login(dto);
        }

        public async Task<User> CreateUserAsync(CreateUserDTO request)
        {
            try
            {
                var newUser = new User()
                {
                    FirstName = request.FirstName,
                    LastName = request.LastName,
                    Email = request.Email,
                    PasswordHash = BCrypt.Net.BCrypt.HashPassword(request.Password),
                    Username = request.Username,
                    Role = Enum.TryParse<Role>(request.Role, out var parsedRole)
                        ? parsedRole
                        : Role.User,
                };

                var created = await _userRepository.Create(newUser);
                return created;
            }
            catch (InvalidOperationException ex)
                when (ex.Message.Contains("email address already exists"))
            {
                throw new EmailAlreadyExistsException(request.Email);
            }
            catch (Exception ex)
            {
                throw new Exception("There was an error creating the user", ex);
            }
        }

        public async Task<User> UpdateUserAsync(int id, UpdateUserDTO request)
        {
            var userToUpdate = new User
            {
                Id = id,
                FirstName = request.FirstName,
                LastName = request.LastName,
                Email = request.Email,
                PasswordHash = request.Password,
                Username = request.Username,
                Role = Enum.TryParse<Role>(request.Role, out var parsedRole)
                    ? parsedRole
                    : Role.User,
            };

            var updated = await _userRepository.Update(userToUpdate, request);
            return updated;
        }
    }
}